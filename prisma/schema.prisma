// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StatusType {
  bounced
  sent
}

model Audience {
  id   String @id @default(uuid())
  name String

  recipients     Recipient[]
  emailCampaigns EmailCampaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailCampaign {
  id       String  @id @default(uuid())
  title    String?
  subject  String?
  html     String?
  bodyText String?
  from     String?
  fromName String?
  replyTo  String?

  CampaignDeliveryStatus CampaignDeliveryStatus[]

  audienceId String
  audience   Audience @relation(fields: [audienceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Recipient {
  id    String  @id @default(uuid())
  name  String?
  email String

  audiences              Audience[]
  CampaignDeliveryStatus CampaignDeliveryStatus[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email])
}

model CampaignDeliveryStatus {
  id     String     @id @default(uuid())
  status StatusType

  emailCampaignId String
  emailCampaign   EmailCampaign @relation(fields: [emailCampaignId], references: [id], onDelete: Cascade)
  recipientId     String
  recipient       Recipient     @relation(fields: [recipientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
